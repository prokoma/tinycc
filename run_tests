#!/bin/bash
set -euo pipefail
trap 'echo "Script error: $(basename "$BASH_SOURCE"):$LINENO $BASH_COMMAND" >&2' ERR

ROOT_DIR="$(dirname "$0")"
INPUT_DIR="$ROOT_DIR/examples"
OUTPUT_DIR="$ROOT_DIR/test-out"
T86_CLI_BIN="$ROOT_DIR/t86/build/t86-cli/t86-cli"

run_test () {
  local file="$1"
  local name="$(basename $1)"
  local out_base="$OUTPUT_DIR/$name"

  echo "== $name =="

  local expected="$out_base.expected"
  awk 'match($0, /^\/\/ > (.+)/, m) { print m[1] }' "$file" >"$expected"

  local cfile="$out_base.gcc"
  local cbin="$cfile.bin"
  local cout="$cfile.out"

  ./tinycc transpile-to-c --prefix='#include "gcc_runtime.h"' -o "$cfile" "$file"
  gcc -x c -Wall --std=c99 -I "$ROOT_DIR" "$cfile" -o "$cbin"
  "$cbin" >"$cout"

  diff -s "$expected" "$cout" | colordiff

  local asmfile="$out_base.t86"
  local asmerr="$asmfile.err"
  local asmout="$asmfile.out"

  if ! ./tinycc compile -o "$asmfile" "$file" &>"$asmerr"; then
    cat "$asmerr" >&2
    return 1
  fi

  "$T86_CLI_BIN" run "$asmfile" -registerCnt=30 >"$asmout"

  diff -s "$expected" "$asmout" | colordiff
}

mkdir -p "$OUTPUT_DIR"

if [ $# -gt 0 ]; then
  for file in "$@"; do
    run_test "$INPUT_DIR/$(basename "$file")"
  done
else
  test_files="$(find "$INPUT_DIR" -iname '*.c' -print | sort)"
  for file in $test_files; do
    run_test "$file"
  done
fi
